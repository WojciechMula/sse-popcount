========================================================================
                           SIMD popcount
========================================================================

Sample programs for my article http://0x80.pl/articles/sse-popcount.html


Introduction
------------------------------------------------------------------------

Subdirectory **original** contains code from 2008 --- it is 32-bit
and GCC-centric. The **root directory** contains fresh C++11 code,
written with intrinsics and tested on 64-bit machine.

The project now uses GNU autotools for the build. User need to install
autoconf and automake to create the ``configure`` script and
``Makefile`` to compile the program.

::
    autoreconf -vif # generates configure
    ./configure [--disable-ansi-console]
    make
    make run # runs the speed test
    ./verify # verify if the implementations were correct

User can check ``./configure --help`` for more options that can be used
to setup the build. If the host machine has AVX2 instruction set,
the two program ``verify`` and ``speed`` will have AVX2 instructions
baked in.

The ``configure`` test for AVX2 instruction requires GCC compiler
specific builtin ``__builtin_cpu_supports``. For the platforms that
doesn't use gcc by default, can setup the configuration like so.

::
    CC=gcc CXX=g++ ./configure
    make

On the OSX platform ``gcc`` by default references to ``clang``. User can
install ``gcc`` using homebrew. If the installed version were 4.8.
``gcc-48`` should be available. If installed version were 5, ``gcc-5``
can be used. Point the environment variables to the gcc compiler on your
machine correspondingly.

After ``make`` you'll get two programs:

* ``verify`` --- program tests if all non-lookup implementations counts
bits properly.

* ``speed`` --- program tests different implementations of popcount
procedure; please read help to find all options (run the program without
arguments).

You can also run ``make run`` to run ``speed`` for all available
implementations.

To clean the temporal files generated by autotools, run 
``make maintainer-clean``. For other make targets see `Automake manual`__.

__ https://www.gnu.org/software/automake/manual/html_node/Standard-Targets.html


Available implementations in the new version
------------------------------------------------------------------------

* ``sse-lookup`` --- SSE pshufb version described in the article.
* ``avx2-lookup`` --- AVX2 pshufb version described in the article.
* ``lookup-8`` --- lookup table of type ``std::uint8_t[256]``.
* ``lookup-64`` --- lookup table of type ``std::uint64_t[256]``.
  LUT is 8 times larger, but we avoid extending 8 to 64 bits.
* ``bit-parallel`` --- well know bit parallel method.
* ``bit-parallel-optimized`` --- in this variant counting
  on packed bytes is performed exactly in the same way
  as described in the article: this gives **50% speedup**.
* ``sse-bit-parallel`` --- SSE implementation of
  ``bit-parallel-optimized``.
* ``cpu`` --- use ``popcnt`` instructions

